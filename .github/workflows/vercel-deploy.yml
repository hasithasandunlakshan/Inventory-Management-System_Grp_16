name: Deploy to Vercel

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/inventory-management-system/**'
      - '.github/workflows/vercel-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/inventory-management-system/**'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    name: Build, Test & Deploy to Vercel
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend/inventory-management-system
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/inventory-management-system/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint

      - name: Test build application
        run: npm run build
        # No hardcoded env vars - Next.js will use empty/undefined for build test
        # Actual deployment uses environment variables from Vercel dashboard

      - name: Verify build output
        run: |
          if [ -d ".next" ]; then
            echo "✅ Build successful - .next directory created"
            ls -la .next
          else
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event_name == 'push' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Show Vercel Environment Variables (for debugging)
        run: |
          echo "📋 Environment variables that will be used from Vercel:"
          echo "-----------------------------------------------------------"
          if [ -f ".vercel/.env.${{ github.event_name == 'push' && 'production' || 'preview' }}.local" ]; then
            echo "✅ Found Vercel environment file"
            cat .vercel/.env.${{ github.event_name == 'push' && 'production' || 'preview' }}.local | grep "NEXT_PUBLIC_" || echo "No NEXT_PUBLIC_ variables found"
          else
            echo "⚠️  No Vercel environment file found"
          fi
          echo "-----------------------------------------------------------"
        continue-on-error: true

      - name: Build Project with Vercel
        run: vercel build ${{ github.event_name == 'push' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
        # Environment variables are automatically loaded from Vercel (pulled in previous step)

      - name: Deploy to Vercel (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: deploy-production
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --archive=tgz)
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "### ✅ Deployed to Production" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **URL:** $url" >> $GITHUB_STEP_SUMMARY

      - name: Clean up old production deployments (keep last 3)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "📦 Cleaning up old production deployments (keeping last 3)..."
          
          # Get all deployments in JSON format
          vercel ls --token=${{ secrets.VERCEL_TOKEN }} --yes --format json > deployments.json || true
          
          # Alternative: Use vercel deployments list command
          deployments=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep -E "inventory-management-system" | awk '{print $1}' | tail -n +4)
          
          count=0
          for deployment in $deployments; do
            if [ ! -z "$deployment" ]; then
              echo "🗑️  Deleting old deployment: $deployment"
              vercel rm $deployment --token=${{ secrets.VERCEL_TOKEN }} --yes || echo "⚠️  Failed to delete $deployment"
              count=$((count+1))
            fi
          done
          
          echo "✅ Cleaned up $count old deployments"
        continue-on-error: true

      - name: Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request'
        id: deploy-preview
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --archive=tgz)
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "### 🔍 Preview Deployment" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **URL:** $url" >> $GITHUB_STEP_SUMMARY

      - name: Clean up old preview deployments (keep last 2)
        if: github.event_name == 'pull_request'
        run: |
          echo "📦 Cleaning up old preview deployments (keeping last 2)..."
          
          # Get all preview deployments (exclude Production)
          deployments=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep -v "Production" | grep -E "inventory-management-system" | awk '{print $1}' | tail -n +3)
          
          count=0
          for deployment in $deployments; do
            if [ ! -z "$deployment" ] && [ "$deployment" != "NAME" ]; then
              echo "🗑️  Deleting old preview deployment: $deployment"
              vercel rm $deployment --token=${{ secrets.VERCEL_TOKEN }} --yes || echo "⚠️  Failed to delete $deployment"
              count=$((count+1))
            fi
          done
          
          echo "✅ Cleaned up $count old preview deployments"
        continue-on-error: true

      - name: Comment PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 🚀 Vercel Preview Deployment
              
              ✅ Your application has been deployed to Vercel!
              
              🌐 **Preview URL:** ${{ steps.deploy-preview.outputs.url }}
              
              📝 **Commit:** ${{ github.event.pull_request.head.sha }}
              👤 **Author:** @${{ github.event.pull_request.user.login }}
              
              ---
              *Deployed via GitHub Actions*`
            })

