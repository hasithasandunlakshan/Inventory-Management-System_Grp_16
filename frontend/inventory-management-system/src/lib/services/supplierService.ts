import { Supplier, SupplierCreateRequest } from '../types/supplier';
import { createAuthenticatedRequestOptions } from '../utils/authUtils';

// Use API Gateway URL instead of direct service
const API_BASE_URL = 'http://localhost:8090/api/suppliers'; // Through API Gateway
const DIRECT_API_BASE_URL = 'http://localhost:8082/api/suppliers'; // Direct to Supplier Service

export const supplierService = {
  /**
   * Get all suppliers
   */
  async getAllSuppliers(): Promise<Supplier[]> {
    try {
      const response = await fetch(
        API_BASE_URL,
        createAuthenticatedRequestOptions()
      );

      if (!response.ok) {
        throw new Error(`Failed to fetch suppliers: ${response.status}`);
      }

      return response.json();
    } catch (error) {
      console.error('Failed to fetch suppliers:', error);
      throw new Error('Failed to fetch suppliers - backend not available');
    }
  },

  /**
   * Get supplier by ID
   */
  async getSupplierById(id: string): Promise<Supplier> {
    try {
      const response = await fetch(
        `${API_BASE_URL}/${id}`,
        createAuthenticatedRequestOptions()
      );

      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('Supplier not found');
        }
        throw new Error(`Failed to fetch supplier: ${response.status}`);
      }

      return response.json();
    } catch (error) {
      console.error('Failed to fetch supplier:', error);
      throw error;
    }
  },

  /**
   * Create new supplier
   */
  async createSupplier(supplier: SupplierCreateRequest): Promise<Supplier> {
    try {
      // Convert to the DTO format expected by backend
      const supplierDTO = {
        supplierId: null, // Will be generated by backend
        userId: supplier.userId,
        userName: null, // Will be populated by backend
        categoryId: supplier.categoryId,
        categoryName: null, // Will be populated by backend
      };

      // First try through API Gateway
      const response = await fetch(
        API_BASE_URL,
        createAuthenticatedRequestOptions('POST', supplierDTO)
      );

      if (response.ok) {
        return response.json();
      }

      // If API Gateway fails, try direct access for development
      console.log(
        'API Gateway failed for create, trying direct access to supplier service...'
      );
      const directResponse = await fetch(DIRECT_API_BASE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(supplierDTO),
      });

      if (directResponse.ok) {
        return directResponse.json();
      }

      throw new Error(
        `Failed to create supplier: API Gateway: ${response.status}, Direct: ${directResponse.status}`
      );
    } catch (error) {
      console.error('Failed to create supplier:', error);
      throw new Error('Failed to create supplier - backend not available');
    }
  },

  /**
   * Update existing supplier
   */
  async updateSupplier(supplier: Supplier): Promise<Supplier> {
    try {
      const response = await fetch(
        `${API_BASE_URL}/${supplier.supplierId}`,
        createAuthenticatedRequestOptions('PUT', supplier)
      );

      if (!response.ok) {
        throw new Error('Failed to update supplier');
      }

      return response.json();
    } catch (error) {
      console.error('Failed to update supplier:', error);
      throw new Error('Failed to update supplier - backend not available');
    }
  },

  /**
   * Delete supplier
   */
  async deleteSupplier(id: string): Promise<void> {
    try {
      const response = await fetch(
        `${API_BASE_URL}/${id}`,
        createAuthenticatedRequestOptions('DELETE')
      );

      if (!response.ok) {
        throw new Error('Failed to delete supplier');
      }
    } catch (error) {
      console.error('Failed to delete supplier:', error);
      throw new Error('Failed to delete supplier - backend not available');
    }
  },
};
