import { Supplier, SupplierCreateRequest } from '../types/supplier';
import { createAuthenticatedRequestOptions } from '../utils/authUtils';

// Use Choreo Supplier Service URL
const API_BASE_URL = process.env.NEXT_PUBLIC_SUPPLIER_SERVICE_URL
  ? `${process.env.NEXT_PUBLIC_SUPPLIER_SERVICE_URL}/api/suppliers`
  : 'http://localhost:8090/api/suppliers'; // Fallback to API Gateway

export const supplierService = {
  /**
   * Get all suppliers
   */
  async getAllSuppliers(): Promise<Supplier[]> {
    try {
      const response = await fetch(
        API_BASE_URL,
        createAuthenticatedRequestOptions()
      );

      if (!response.ok) {
        throw new Error(`Failed to fetch suppliers: ${response.status}`);
      }

      return response.json();
    } catch (error) {
      throw new Error('Failed to fetch suppliers - backend not available');
    }
  },

  /**
   * Get supplier by ID
   */
  async getSupplierById(id: string): Promise<Supplier> {
    try {
      const response = await fetch(
        `${API_BASE_URL}/${id}`,
        createAuthenticatedRequestOptions()
      );

      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('Supplier not found');
        }
        throw new Error(`Failed to fetch supplier: ${response.status}`);
      }

      return response.json();
    } catch (error) {
      throw error;
    }
  },

  /**
   * Create new supplier
   */
  async createSupplier(supplier: SupplierCreateRequest): Promise<Supplier> {
    try {
      // Convert to the DTO format expected by backend
      const supplierDTO = {
        supplierId: null, // Will be generated by backend
        userId: supplier.userId,
        userName: null, // Will be populated by backend
        categoryId: supplier.categoryId,
        categoryName: null, // Will be populated by backend
      };

      // First try through API Gateway
      const response = await fetch(
        API_BASE_URL,
        createAuthenticatedRequestOptions('POST', supplierDTO)
      );

      if (response.ok) {
        return response.json();
      }

      throw new Error(`Failed to create supplier: ${response.status}`);
    } catch (error) {
      throw new Error('Failed to create supplier - backend not available');
    }
  },

  /**
   * Update existing supplier
   */
  async updateSupplier(supplier: Supplier): Promise<Supplier> {
    try {
      const response = await fetch(
        `${API_BASE_URL}/${supplier.supplierId}`,
        createAuthenticatedRequestOptions('PUT', supplier)
      );

      if (!response.ok) {
        throw new Error('Failed to update supplier');
      }

      return response.json();
    } catch (error) {
      throw new Error('Failed to update supplier - backend not available');
    }
  },

  /**
   * Delete supplier
   */
  async deleteSupplier(id: string): Promise<void> {
    try {
      const response = await fetch(
        `${API_BASE_URL}/${id}`,
        createAuthenticatedRequestOptions('DELETE')
      );

      if (!response.ok) {
        throw new Error('Failed to delete supplier');
      }
    } catch (error) {
      throw new Error('Failed to delete supplier - backend not available');
    }
  },
};
