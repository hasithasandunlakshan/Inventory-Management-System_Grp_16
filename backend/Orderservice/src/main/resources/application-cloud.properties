# Server Configuration
server.port=${PORT:8080}
spring.application.name=orderservice

# Database Configuration
spring.datasource.url=${DATABASE_URL:jdbc:mysql://avnadmin:AVNS_Ipqzq0kuyRjWpAdm_pc@mysql-38838f7f-sem5-project.f.aivencloud.com:27040/InventoryManagement?ssl-mode=REQUIRED}
spring.datasource.username=${DATABASE_USERNAME:avnadmin}
spring.datasource.password=${DATABASE_PASSWORD:AVNS_Ipqzq0kuyRjWpAdm_pc}
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:order-service-group}
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO_OFFSET_RESET:earliest}
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.spring.json.type.mapping=InventoryReservationRequestEvent:com.Orderservice.Orderservice.events.InventoryReservationRequestEvent,InventoryReservationResponseEvent:com.Orderservice.Orderservice.events.InventoryReservationResponseEvent

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=${KAFKA_PRODUCER_ACKS:all}
spring.kafka.producer.retries=${KAFKA_PRODUCER_RETRIES:3}
spring.kafka.producer.enable-idempotence=${KAFKA_PRODUCER_IDEMPOTENCE:true}
spring.kafka.producer.properties.spring.json.use.type.headers=false
spring.kafka.producer.properties.spring.json.type.mapping=InventoryReservationRequestEvent:com.Orderservice.Orderservice.events.InventoryReservationRequestEvent,InventoryReservationResponseEvent:com.Orderservice.Orderservice.events.InventoryReservationResponseEvent

# Kafka Security Configuration (for Confluent Cloud or secured Kafka)
spring.kafka.properties.security.protocol=${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
spring.kafka.properties.sasl.mechanism=${KAFKA_SASL_MECHANISM:}
spring.kafka.properties.sasl.jaas.config=${KAFKA_SASL_JAAS_CONFIG:}

# Service URLs
user.service.url=${USER_SERVICE_URL:http://localhost:8080}

# Stripe Configuration
stripe.secret.key=${STRIPE_SECRET_KEY:sk_test_51RruEkCMSVvAbN0Rd6H8EBCbzMQ7E3RXK7Icea1YwqlZncUXhCN1paovgMSTIFdnKiE3MwEWiA6cIRbcRXB2uTiE00JAGGuoSR}
stripe.api.key=${STRIPE_API_KEY:sk_test_51RruEkCMSVvAbN0Rd6H8EBCbzMQ7E3RXK7Icea1YwqlZncUXhCN1paovgMSTIFdnKiE3MwEWiA6cIRbcRXB2uTiE00JAGGuoSR}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET:whsec_YOUR_WEBHOOK_SECRET_HERE}

# Management endpoints for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized