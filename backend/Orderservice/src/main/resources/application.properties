server.port=8084
spring.application.name=orderservice

# Actuator Configuration for Health Checks
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
management.health.defaults.enabled=true
management.endpoint.health.probes.enabled=true

# Database configuration
spring.datasource.url=jdbc:mysql://avnadmin:AVNS_Ipqzq0kuyRjWpAdm_pc@mysql-38838f7f-sem5-project.f.aivencloud.com:27040/InventoryManagement?ssl-mode=REQUIRED
spring.datasource.username=avnadmin
spring.datasource.password=AVNS_Ipqzq0kuyRjWpAdm_pc
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# HikariCP Connection Pool Configuration (Optimized for Cloud Database)
# Maximum number of connections in the pool
spring.datasource.hikari.maximum-pool-size=5
# Minimum number of idle connections maintained by HikariCP
spring.datasource.hikari.minimum-idle=2
# Maximum amount of time (ms) that a connection is allowed to sit idle
spring.datasource.hikari.idle-timeout=300000
# Maximum lifetime of a connection in the pool (ms) - 30 minutes
spring.datasource.hikari.max-lifetime=1800000
# Maximum time (ms) that a client will wait for a connection
spring.datasource.hikari.connection-timeout=20000
# Connection test query to verify connection is alive
spring.datasource.hikari.connection-test-query=SELECT 1
# Pool name for identification in logs
spring.datasource.hikari.pool-name=OrderServiceHikariCP
# Enable connection leak detection (10 seconds)
spring.datasource.hikari.leak-detection-threshold=10000
# Validate connection before giving to application
spring.datasource.hikari.validation-timeout=5000
# Auto-commit behavior
spring.datasource.hikari.auto-commit=true

# Kafka Configuration (Cloud Deployment)
spring.kafka.bootstrap-servers=34.58.159.161:9092
spring.kafka.consumer.group-id=order-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.spring.json.type.mapping=InventoryReservationRequestEvent:com.Orderservice.Orderservice.events.InventoryReservationRequestEvent,InventoryReservationResponseEvent:com.Orderservice.Orderservice.events.InventoryReservationResponseEvent

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.enable-idempotence=true
spring.kafka.producer.properties.spring.json.use.type.headers=false
spring.kafka.producer.properties.spring.json.type.mapping=InventoryReservationRequestEvent:com.Orderservice.Orderservice.events.InventoryReservationRequestEvent,InventoryReservationResponseEvent:com.Orderservice.Orderservice.events.InventoryReservationResponseEvent

# For Confluent Cloud, uncomment and configure these:
# spring.kafka.bootstrap-servers=<YOUR_CONFLUENT_CLOUD_BOOTSTRAP_SERVERS>
# spring.kafka.properties.security.protocol=SASL_SSL
# spring.kafka.properties.sasl.mechanism=PLAIN
# spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="<YOUR_API_KEY>" password="<YOUR_API_SECRET>";

# Service URLs
user.service.url=https://userservice-337812374841.us-central1.run.app

# Stripe Configuration (replace with your actual keys)
stripe.secret.key=sk_test_51RruEkCMSVvAbN0Rd6H8EBCbzMQ7E3RXK7Icea1YwqlZncUXhCN1paovgMSTIFdnKiE3MwEWiA6cIRbcRXB2uTiE00JAGGuoSR
stripe.api.key=sk_test_51RruEkCMSVvAbN0Rd6H8EBCbzMQ7E3RXK7Icea1YwqlZncUXhCN1paovgMSTIFdnKiE3MwEWiA6cIRbcRXB2uTiE00JAGGuoSR
stripe.webhook.secret=whsec_YOUR_WEBHOOK_SECRET_HERE