name: Deploy Order Service to Google Cloud VM

on:
  push:
    branches:
      - main
    paths:
      - 'backend/Orderservice/**'
      - '.github/workflows/deploy-to-vm.yml'
  workflow_dispatch:  # Allow manual trigger

env:
  PROJECT_ID: api-gateway-474511
  VM_NAME: orderservice-vm
  ZONE: us-central1-a
  SERVICE_PORT: 8084
  SERVICE_NAME: orderservice

jobs:
  deploy:
    name: Build and Deploy to VM
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Build with Maven
        working-directory: ./backend/Orderservice
        run: |
          chmod +x ./mvnw
          ./mvnw clean package -DskipTests
          echo "‚úÖ Build completed successfully"
          ls -lh target/*.jar
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Verify VM exists
        id: check-vm
        run: |
          if gcloud compute instances describe ${{ env.VM_NAME }} --zone=${{ env.ZONE }} &>/dev/null; then
            echo "vm_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ VM ${{ env.VM_NAME }} exists"
          else
            echo "vm_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå VM ${{ env.VM_NAME }} does not exist"
            exit 1
          fi
      
      - name: Get VM external IP
        id: get-ip
        run: |
          VM_IP=$(gcloud compute instances describe ${{ env.VM_NAME }} \
            --zone=${{ env.ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
          echo "üåê VM IP: $VM_IP"
      
      - name: Upload JAR to VM
        run: |
          echo "üì§ Uploading JAR file to VM..."
          gcloud compute scp \
            ./backend/Orderservice/target/Orderservice-*.jar \
            ${{ env.VM_NAME }}:/tmp/orderservice.jar \
            --zone=${{ env.ZONE }} \
            --quiet
          echo "‚úÖ JAR uploaded successfully"
      
      - name: Deploy to VM
        run: |
          echo "üöÄ Deploying application on VM..."
          gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command="
            set -e
            
            echo 'üì¶ Moving JAR to application directory...'
            sudo mv /tmp/orderservice.jar /opt/orderservice/orderservice.jar
            sudo chown orderservice:orderservice /opt/orderservice/orderservice.jar
            sudo chmod 644 /opt/orderservice/orderservice.jar
            
            echo 'üîÑ Restarting service...'
            sudo systemctl daemon-reload
            sudo systemctl restart orderservice
            
            echo '‚è≥ Waiting for service to start...'
            sleep 10
            
            echo 'üè• Checking service status...'
            sudo systemctl status orderservice --no-pager || true
            
            echo '‚úÖ Deployment completed successfully!'
          "
      
      - name: Wait for service to be healthy
        run: |
          echo "üè• Waiting for service to become healthy..."
          VM_IP=${{ steps.get-ip.outputs.vm_ip }}
          
          for i in {1..30}; do
            if curl -f -s http://$VM_IP:${{ env.SERVICE_PORT }}/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ Service is healthy!"
              curl -s http://$VM_IP:${{ env.SERVICE_PORT }}/actuator/health | jq '.'
              exit 0
            fi
            echo "‚è≥ Attempt $i/30 - Service not ready yet, waiting..."
            sleep 10
          done
          
          echo "‚ùå Service did not become healthy in time"
          exit 1
      
      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          VM_IP=${{ steps.get-ip.outputs.vm_ip }}
          
          # Check health endpoint
          echo "Checking health endpoint..."
          HEALTH_STATUS=$(curl -s http://$VM_IP:${{ env.SERVICE_PORT }}/actuator/health | jq -r '.status')
          echo "Health status: $HEALTH_STATUS"
          
          # Check service logs
          echo "Checking recent logs..."
          gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command="
            sudo journalctl -u orderservice -n 20 --no-pager
          "
          
          echo "‚úÖ Deployment verification completed"
      
      - name: Deployment summary
        if: success()
        run: |
          VM_IP=${{ steps.get-ip.outputs.vm_ip }}
          echo "=================================="
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "=================================="
          echo "Service: Order Service"
          echo "VM Name: ${{ env.VM_NAME }}"
          echo "VM IP: $VM_IP"
          echo "Port: ${{ env.SERVICE_PORT }}"
          echo "Health: http://$VM_IP:${{ env.SERVICE_PORT }}/actuator/health"
          echo "API Base: http://$VM_IP:${{ env.SERVICE_PORT }}/api/orders"
          echo "=================================="
      
      - name: Deployment failed notification
        if: failure()
        run: |
          echo "=================================="
          echo "‚ùå DEPLOYMENT FAILED!"
          echo "=================================="
          echo "Please check the logs above for details"
          echo "=================================="
